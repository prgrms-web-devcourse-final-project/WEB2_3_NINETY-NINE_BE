spring.application.name=OnCulture

# MariaDB setting
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/OnCulture
spring.datasource.username=root
spring.datasource.password=!123456

# Hibernate setting
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true


# JWT setting
jwt.secret=dkssudgktpdywjsmsvudghkdnjsdptkfrhdlTsms99tpqjaxogusdlqslek

# File setting
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=50MB

# AWS S3 Bucket
cloud.aws.stack.auto=false
cloud.aws.region.static=ap-northeast-2
cloud.aws.s3.bucket=ninetynine-profile-image
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}

instagram.username=sjb2_2025
instagram.password=tlswjdqja01!

# OAuth2 Redirect-uri
# Backend Test Redirect-uri = /index.html
oauth2.redirect-uri=${REDIRECT_URI}
# Frontend Test Redirect-uri
#oauth2.redirect-uri = http://localhost:5173/

# OAuth2 Google setting
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH2_REDIRECT_URI_GOOGLE}
spring.security.oauth2.client.registration.google.scope=profile, email
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# OAuth2 Kakao setting
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri=${OAUTH2_REDIRECT_URI_KAKAO}
spring.security.oauth2.client.registration.kakao.scope=profile_nickname, account_email
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# GMail Setting
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=testninetynine24799@gmail.com
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.stattls.enable=true
spring.mail.properties.mail.smtp.stattle.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
# 인증 코드 유효 시간 (30분)
spring.mail.auth-code-expiration-millis=1800000